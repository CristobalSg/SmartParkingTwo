generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para tipos especiales de estacionamiento
enum ParkingSpecialType {
  regular
  disabled
  pregnant
  electric
  visitor
}

// Enum para estados de reserva
enum ReservationStatus {
  pending
  confirmed
  active
  completed
  cancelled
  expired
}

// üè¢ NUEVA TABLA: Tenants (inquilinos/organizaciones)
model Tenant {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId  String   @unique @map("tenant_id") @db.VarChar(50) // empresa-a, ciudad-b, etc.
  name      String   @db.VarChar(255) // "Empresa A S.L.", "Ciudad B"
  domain    String   @unique @db.VarChar(255) // "empresa-a.smartparking.com"
  isActive  Boolean  @default(true) @map("is_active")
  settings  Json?    @db.JsonB // Configuraciones espec√≠ficas del tenant
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones con otras tablas
  administrators Administrator[]
  users          User[]
  parkingZones   ParkingZone[]

  @@map("tenants")
}

// Tabla de administradores - AHORA CON TENANT
model Administrator {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId     String   @map("tenant_id") @db.Uuid // ‚Üê NUEVO CAMPO
  email        String   @db.VarChar(255) // ‚Üê YA NO ES UNIQUE GLOBAL
  passwordHash String   @map("password_hash") @db.VarChar(255)
  name         String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Email √∫nico POR TENANT, no globalmente
  @@unique([tenantId, email])
  @@map("administrators")
}

// Tabla de usuarios finales - AHORA CON TENANT
model User {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId          String   @map("tenant_id") @db.Uuid // ‚Üê NUEVO CAMPO
  email             String   @db.VarChar(255) // ‚Üê YA NO ES UNIQUE GLOBAL
  name              String   @db.VarChar(255)
  emailVerified     Boolean  @default(false) @map("email_verified")
  verificationToken String?  @map("verification_token") @db.VarChar(255)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  // Email √∫nico POR TENANT, no globalmente
  @@unique([tenantId, email])
  @@map("users")
}

// Zonas de estacionamiento - AHORA CON TENANT
model ParkingZone {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId    String   @map("tenant_id") @db.Uuid // ‚Üê NUEVO CAMPO
  name        String   @db.VarChar(255)
  description String?  @db.Text
  capacity    Int
  createdAt   DateTime @default(now()) @map("created_at")

  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parkingSpaces ParkingSpace[]

  // Nombre √∫nico POR TENANT
  @@unique([tenantId, name])
  @@map("parking_zones")
}

// Espacios individuales de estacionamiento
model ParkingSpace {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  zoneId      String             @map("zone_id") @db.Uuid
  spaceNumber String             @map("space_number") @db.VarChar(10)
  specialType ParkingSpecialType @default(regular) @map("special_type")
  isActive    Boolean            @default(true) @map("is_active")
  createdAt   DateTime           @default(now()) @map("created_at")

  zone         ParkingZone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  @@unique([zoneId, spaceNumber])
  @@map("parking_spaces")
}

// Reservas de estacionamiento
model Reservation {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String             @map("user_id") @db.Uuid
  parkingSpaceId String             @map("parking_space_id") @db.Uuid
  status         ReservationStatus  @default(pending)
  reservedFrom   DateTime           @map("reserved_from")
  reservedUntil  DateTime           @map("reserved_until")
  specialNeeds   ParkingSpecialType @default(regular) @map("special_needs")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parkingSpace ParkingSpace @relation(fields: [parkingSpaceId], references: [id], onDelete: Cascade)

  @@map("reservations")
}
